
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import groovy.json.JsonOutput
import hudson.tasks.test.AbstractTestResultAction
import hudson.model.Actionable
import hudson.tasks.junit.CaseResult

def label = "mypod-${UUID.randomUUID().toString()}"
def project = "alert-inquiry-205619"
def slackNotificationChannel = "#alerts"
def author = ""
def message = ""
def testSummary = ""

def getGitAuthor = { ->
    def commit = sh(returnStdout: true, script: 'git rev-parse HEAD')
    return sh(returnStdout: true, script: "git --no-pager show -s --format='%an' ${commit}").trim()
}

def getLastCommitMessage = { ->
    return sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
}

@NonCPS
def getTestSummary = { ->
    def testResultAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
    def summary = ""

    if (testResultAction != null) {
        def total = testResultAction.getTotalCount()
        def failed = testResultAction.getFailCount()
        def failedDiff = testResultAction.failureDiffString
        def skipped = testResultAction.getSkipCount()

        summary = "Passed: ${passed}; Failed: ${failed} ${failedDiff}; Skipped: ${skipped}  out of ${total} "
    } else {
        summary = "No tests found"
    }
    return summary
}

@NonCPS
def getFailedTests = { ->
    def testResultAction = currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
    def failedTestsString = "```"

    if (testResultAction != null) {
        def failedTests = testResultAction.getFailedTests()

        if (failedTests.size() > 9) {
            failedTests = failedTests.subList(0, 8)
        }

        for(CaseResult cr : failedTests) {
            failedTestsString = failedTestsString + "${cr.getFullDisplayName()}:\n${cr.getErrorDetails()}\n\n"
        }
        failedTestsString = failedTestsString + "```"
    }
    return failedTestsString
}

def populateGlobalVariables = {
    author = getGitAuthor()
    message = getLastCommitMessage()
    testSummary = getTestSummary()
}


def notifySlack(text, channel, attachments) {
    def slackURL = 'https://hooks.slack.com/services/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'
    def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'

    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "Jenkins",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])

    sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
}



@NonCPS
def slackNotifyStarted() {

    def colorSlack = '#D4DADF'

    def slackMessage = ""
    def subject = "*STARTED*: Job `${env.JOB_NAME}` [<${env.RUN_DISPLAY_URL}|#${env.BUILD_NUMBER}>] (<${env.RUN_CHANGES_DISPLAY_URL}|  Changes>)"
    slackMessage = slackMessage + subject + "\n\t"
    slackMessage = slackMessage + "*" + env.MESSAGE + "* by (" + getGitAuthor() + ")\n\t"

    slackSend channel: '#alerts', color: colorSlack, message: slackMessage
}

@NonCPS
def slackNotifySuccess() {

    def colorSlack = '#229954'

    notifySlack("", "#alerts", [
        [
          fallback: "Navigation links",
          color: "${colorSlack}",
          actions: [
            {
              "type": "button",
              "text": "Run output",
              "url": "${env.RUN_DISPLAY_URL}",
              "style": "primary"
            },
            {
              "type": "button",
              "text": "Changes",
              "url": "${env.RUN_CHANGES_DISPLAY_URL}"
            },
            {
              "type": "button",
              "text": "Job output",
              "url": "${env.JOB_DISPLAY_URL}"
            }
          ]
        ],
        [
            title: "*SUCCESS*: Job `${env.JOB_NAME}` [<${env.RUN_DISPLAY_URL}|#${env.BUILD_NUMBER}>] (<${env.RUN_CHANGES_DISPLAY_URL}|  Changes>)",
            title_link: "${env.BUILD_URL}",
            color: "${colorSlack}",
            author_name: "${env.AUTHOR}",
            text: "${env.MESSAGE}",
            fields: [
                [
                    title: "Branch",
                    value: "${env.GIT_BRANCH}",
                    short: true
                ],
                [
                    title: "Test Results",
                    value: "Placeholder for test results",
                    short: true
                ]
            ]
        ],
        [
           "fallback": "Sunny weather!",
           "image_url": "https://www.clipartmax.com/png/middle/165-1652318_public-domain-icons-simple-weather-icons-sunny.png"
        ]
    ])
}

@NonCPS
def slackNotifyFailure() {

    def colorSlack = '#FF9FA1'

    def slackMessage = ""
    def subject = "*FAILED*: Job `${env.JOB_NAME}` [<${env.RUN_DISPLAY_URL}|#${env.BUILD_NUMBER}>] (<${env.RUN_CHANGES_DISPLAY_URL}|  Changes>)"
    slackMessage = slackMessage + subject + "\n\t"
    slackMessage = slackMessage + "*" + env.MESSAGE + "* by (" + env.AUTHOR + ")\n\t"

    if (env.TEST_REPORT != null) {
        slackMessage = slackMessage + "```" + env.TEST_REPORT + "```\n\t"
    }

    if (env.DEPENDENCY_UPDATES != null) {
        slackMessage = slackMessage + "```" + env.DEPENDENCY_UPDATES + "```\n\t"
    }

    slackSend channel: '#alerts', color: colorSlack, message: slackMessage
}

@NonCPS
def slackNotify(String buildStatus = 'STARTED') {

    // if the status for Build is null this would mean a successful build.
    buildStatus = buildStatus ?: 'SUCCESS'

    def colorSlack
    if (buildStatus == 'STARTED') {
        colorSlack = '#D4DADF'
    } else if (buildStatus == 'SUCCESS') {
        colorSlack = '#BDFFC3'
    } else if (buildStatus == 'UNSTABLE') {
        colorSlack = '#FFFE89'
    }
    else if (buildStatus == 'ENDED') {
        colorSlack = '#FFFE89'
    }
   else {
        colorSlack = '#FF9FA1'
    }

    def slackMessage = ""
    def subject = "${buildStatus}: Job `${env.JOB_NAME}` [<${env.RUN_DISPLAY_URL}|#${env.BUILD_NUMBER}>] (<${env.RUN_CHANGES_DISPLAY_URL}|  Changes>)"
    slackMessage = slackMessage + subject + "\n\t"

    if (buildStatus != 'STARTED') {
        slackMessage = slackMessage + env.MESSAGE + " by (" + env.AUTHOR + ")\n\t"
        //slackMessage = slackMessage + env.DEPENDENCY_UPDATES + "\n\t"
    }

    slackSend channel: '#alerts', color: colorSlack, message: slackMessage
}

podTemplate(label: label, containers: [
    containerTemplate(name: 'gcloud', image: 'google/cloud-sdk:latest', ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'sbt', image: 'spikerlabs/scala-sbt:scala-2.11.12-sbt-1.2.6', ttyEnabled: true, command: 'cat')
  ]) {

ansiColor('xterm') {
    timestamps {
          logstash {
            node(label) {

                    try {

                            container('gcloud') {
                                stage('1 - Clone repository') {
                                    withCredentials([file(credentialsId: 'key-sa', variable: 'GC_KEY')]) {
                                            //sh("gcloud auth activate-service-account --key-file=${GC_KEY};")
                                            //sh("gcloud source repos clone rmg-de-ml --project=${project};")
                                        }
                                    }
                                    checkout scm

                                    env.AUTHOR = sh(returnStdout: true, script: "git --no-pager show -s --format='%an'").trim()
                                    env.MESSAGE = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                                    echo 'Started'
                                    slackNotifyStarted()

                                }

                            container('sbt') {
                                stage('2 - Compile') {
                                    //sh('sbt compile;')
                                    echo 'Compile complete'
                                }
                                stage('3 - Check Styles') {
                                    //sh('sbt scalastyle;')
                                    //checkstyle pattern: 'target/scalastyle-result.xml'

                                    //sh('sbt dependencyUpdatesReport;')
                                    //archiveArtifacts artifacts: 'target/dependency-updates.txt', fingerprint: false
                                    //env.DEPENDENCY_UPDATES = readFile 'target/dependency-updates.txt'
                                }
                                stage('4 - Automated Tests') {

                                    parallel "4.1 - Unit Tests": {
                                            sh('sbt clean coverage test;sbt coverageReport;')
                                            step([$class: 'ScoveragePublisher', reportDir: 'target/scala-2.11/scoverage-report', reportFile: 'scoverage.xml'])
                                            junit 'target/junit/*.xml'

                                            script {
                                                AbstractTestResultAction testResultAction =  currentBuild.rawBuild.getAction(AbstractTestResultAction.class)
                                                if (testResultAction != null) {
                                                    def totalNumberOfTests = testResultAction.totalCount
                                                    def failedNumberOfTests = testResultAction.failCount
                                                    def failedDiff = testResultAction.failureDiffString
                                                    def skippedNumberOfTests = testResultAction.skipCount
                                                    def passedNumberOfTests = totalNumberOfTests - failedNumberOfTests - skippedNumberOfTests
                                                    def testReport = "Tests Report:\n Passed: ${passedNumberOfTests}; Failed: ${failedNumberOfTests} ${failedDiff}; Skipped: ${skippedNumberOfTests}  out of ${totalNumberOfTests} "
                                                    env.TEST_REPORT = testReport
                                                }
                                            }
                                        },

                                        "4.2 - Integration Tests": {
                                            sh('sleep 5s')
                                       },

                                        "4.3 - Performance Tests": {
                                            sh('sleep 10s')
                                        }

                                }
                                stage('5 - Package') {
                                    //sh('sbt package;')
                                    //archiveArtifacts artifacts: 'target/**/*.jar', fingerprint: true
                                    echo 'Package complete'
                                }
                                stage('6 - Documentation') {
                                    sh('sbt doc;')
                                    publishHTML target: [
                                        allowMissing: false,
                                        alwaysLinkToLastBuild: false,
                                        keepAll: true,
                                        reportDir: 'target/scala-2.11/api',
                                        reportFiles: '*',
                                        reportName: 'Scala Docs'
                                      ]
                                }
                                stage('7 - Publish') {

                                    try{
                                        //sh('sbt publish;')
                                        echo 'Publish complete'
                                    } catch (e) {
                                        retry(2) {
                                            sleep 10
                                            sh('sbt publish;')
                                        }
                                    }

                                }
                                echo 'Successfully completed'
                                currentBuild.result = "SUCCESS"
                                slackNotifySuccess()
                                echo 'Success notification sent'
                            }
                        }
                  catch (e) {
                      currentBuild.result = "FAILURE"
                      slackNotify(currentBuild.result)
                      throw e
                  } finally {
                      //slackNotify(currentBuild.result)
                  }
                }
            }
        }
    }
}

